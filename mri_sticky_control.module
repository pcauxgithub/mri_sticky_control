<?php
//TODO: Wenn mit mehreren Inhalstypen gearbeitet werden soll, dann wird noch eine Lösung benötigt, wie die inhaltstypen gespeichert werden sollten. Die derzeitige Lösung sieht vor, alle maschinen sprachen bezeichnungen aller typen in einem datenfeld abzulegen, nämlich in scct. Komma getrennt. Geht, schöner wäre allerdings eine eigene Konfiguration pro Inhaltstyp. Das wird möglich durch einen Tuple pro CT in der Basistabelle.
/**
* 
* @param undefined $path
* @param undefined $arg
* 
* @return
*/
//require('mri_sticky_control.functions.inc');
/**
 * Implements hook_cron().
 */
function mri_sticky_control_cron() {
  if (variable_get('sticky_content_check_cron', TRUE)) {
  	watchdog('mri_sticky_control', 'MRI Sticky Control Cron - Check if an sticky Node in System available.');
    module_load_include('inc', 'mri_sticky_control', 'mri_sticky_control.functions');
    //TODO: Check if a Sticky node in System abailable. Create a Function
    //Es könnte auf alle erdenklichen Wegen Nodes gelöscht worden sein. Hier wird mittels Cron geprüft ob Nodes vorhanden sind.
  }
}

function mri_sticky_control_help($path, $arg) {

}

/**
* Implements hook _permission
* Set the permission entries in Backend, and make the permissions available
* 
* @return
*/
function mri_sticky_control_permission() {
  return array(
	  'mri sticky view control config permissions' => array(
	    'title'      => t('View the MRI Sticky Control Config Mask'),
	    'description'=> t('View the config Mask and the currently activated settings.'),
	  ),
	  'mri sticky edit control config permissions' => array(
	    'title'      => t('Edit the MRI Sticky Control Config Mask'),
	    'description'=> t('Permission to change the config Mask and the currently activated settings.'),
	  ),
	);
}
/**
* Implements Menu Entrys, and defines the path/url of the config mask.
* 
* @return
*/
function mri_sticky_control_menu() {
  $items['admin/config/sticky-control/config'] = array(//URL call for this form
    'title'=> 'MRI Sticky Controller Config page',//page title
    'description'=> 'A form to define the Sticky rules.',
    'page callback'  => 'drupal_get_form',// function will be called when the page is accessed.
    'page arguments' => array('mri_sticky_control_form_conf'),// form name
    'access callback'=> TRUE,
    'access arguments' => array('mri sticky view control config permissions'),
    'type'           => MENU_NORMAL_ITEM,
    'file' => 'mri_sticky_control.functions.inc',
  );
  return $items;
}
/**
* //if the deleted node is the observed contenttype, then set a callback.
* @param undefined $form
* @param undefined $form_state
* @param undefined $form_id
* 
* @return
*/
function mri_sticky_control_form_node_delete_confirm_alter(&$form, &$form_state, $form_id) {
	module_load_include('inc', 'mri_sticky_control', 'mri_sticky_control.functions');
  $observedCT = mri_sticky_control_get_observed_contenttypes(); //get a list of observed content type
  if($form['#node']->type == $observedCT ) { 
    $form['actions']['submit']['#submit'][] = '_observed_content_type_will_be_del';
  }
}
/**
* Implements a callback Function that will be triggerd from the node delete_confirm_alter Hook (Node edit Mask)
* @param undefined $form
* @param undefined $form_state
* 
* @return
*/
function _observed_content_type_will_be_del($form, &$form_state) {	
	module_load_include('inc', 'mri_sticky_control', 'mri_sticky_control.functions');
	$observedCT = mri_sticky_control_get_observed_contenttypes();
	$nodeList = node_load_multiple(array(), array('type' => $observedCT, 'sticky' => '1', 'status' => '1'));
	$nodeCounter = 0;
	$result = NULL;
	$nidToSetToSticky = NULL;
	$nodeToDel = NULL;
	//check if sticky Nodes in System
  if($nodeList != NULL ) {
  	$nodeToDel = $form['#node']->nid;
  	//exclude the actualle deleted node
		unset($nodeList[$nodeToDel]);	//Die node die im Moment gelöscht wird darf nicht mitgezählt werden, deshalb aus dem Array entfernen
		$nodeCounter = count($nodeList);		
	}
	
	//A Sticky Node in System is available
	if($nodeCounter > 0){		
		//drupal_set_message('Sticky Nodes im System vorhanden', 'status');
	}
	//There is no sticky Node in the System available. Check if a published node is available.
	else {
		drupal_set_message('Im System ist KEINE Sticky Nodes des <em>'.$observedCT.'</em> im System vorhanden. Deshalb wird die zuletzt gespeicherte Node auf Sticky gesetzt.', 'error');
		//query to get the latest node of observed content type
		$query = db_select('node', 'n')
		  ->fields('n', array('nid'))
		  ->condition('n.status', 1)
		  ->condition('n.nid', $nodeToDel, '!=')
		  ->condition('n.type', array($observedCT))
		  ->orderBy('n.created', 'DESC')
		  ->range(0, 1)
		  ->execute();
	  //It is a published Node available
	  if ($query->rowCount() != NULL) {
	    $result = $query->fetchObject();
	    //set the var to the nid of the resulted node. Later in script this var will be used to set node sticky
	    $nidToSetToSticky = $result->nid;
  	}
  	else {
			drupal_set_message('Achtung: KEINE veröffentlichten Nodes des Typs <em>'.$observedCT.'</em> im System vorhanden.', 'error');
		}
		
		if($nidToSetToSticky != NULL){
			$node = node_load($nidToSetToSticky);
			$node->sticky = '1';   
	    // Save the updated node
	    node_save($node);
	    drupal_set_message('Die zuletzt veröffentlichte Node des Typs <em>'.$observedCT.'</em> wurde auf Sticky gesetzt.', 'error');
	    node_delete($nodeToDel);
		}
		else {
			//the node can not be deletet, because there is no other Node of this content type is system available. 
			drupal_set_message('Der Inhalt konnte nicht gelöscht werden. Im System existiert kein anderer Inhalt des Typs <em>'.$observedCT.'</em>. es muss jedoch mindestens eine Node dieses Inhalts auf "sticky" gesetzt sein.', 'error');
		}
	}
}

function mri_sticky_control_set_other_nodes_unsticky($nidOfNewStickyNode) {
	module_load_include('inc', 'mri_sticky_control', 'mri_sticky_control.functions');
	$observedCT = mri_sticky_control_get_observed_contenttypes();
	$nodeList = node_load_multiple(array(), array('type' => $observedCT, 'sticky' => '1', 'status' => '1'));
	$i = 0;
	foreach($nodeList as $key => $value){
		if($key != $nidOfNewStickyNode){
			$i++;
			$node = node_load($key);
			$value->sticky = 0;
			node_save($node);
		}
	}
	if($i != 0){
			drupal_set_message('Vom Inhaltstyp <em>'.$observedCT.'</em> waren mehrere Inhalte auf "sticky" gesetzt. Im System darf jedoch nur ein "sticky" Inhalt des Typs gespeichert werden.
			bei '.$i.' Inhalten wurde der Status auf "nicht sticky" gesetzt.', 'error');
	}
		
	
}
/**
* Alter Form, to set an Callback if a Node of observed Content Type is saved
* @param undefined $form
* @param undefined $form_state
* @param undefined $form_id
* 
* @return
*/
function mri_sticky_control_form_alter(&$form, $form_state, $form_id) {
	module_load_include('inc', 'mri_sticky_control', 'mri_sticky_control.functions');
	$observedCT = mri_sticky_control_get_observed_contenttypes(); //get a list of observed content type
  if( $form_id == $observedCT. '_node_form' ) { 
    $form['actions']['submit']['#submit'][] = '_observed_content_type_will_be_saved';
  }
}

/**
* Imoplements callback Function for _form_alter hook
* The _form_alter registrated a try to save a node of observed content type and calls this callback funtion.
* @param undefined $form
* @param undefined $form_state
* 
* @return
*/
function _observed_content_type_will_be_saved($form, &$form_state) {	
	module_load_include('inc', 'mri_sticky_control', 'mri_sticky_control.functions');
	$observedCT = mri_sticky_control_get_observed_contenttypes();
	$nodeList = node_load_multiple(array(), array('type' => $observedCT, 'sticky' => '1', 'status' => '1'));
  if ($nodeList != NULL) { //in the System is min. 1 node available, with the attributes "published" and "sticky" of the observed content types 
		//drupal_set_message('Sticky Nodes im System vorhanden', 'status');
		//prüfen ob die aktuell pesaved node sticky ist. in der $nodeList ist ja bereits mindestens eine Node enthalten.
		//Wenn die aktuell presaved Node sticky aktiviert hat, dann alle anderen nodes unsticks
		//Wenn die aktuell presaved Node NICHT sticky aktiviert hat, dann tue gar nichts.
		if($form_state['node']->sticky == '0'){
			//diese Node ist nicht sticky, aber im System existiert bereits eine sticky Node
		}
		else {
      //diese Node ist Sticky, im System existiert aber bereits mindestens eine sticky Node. Also alle Nodes, außer der aktuelle presaved node werden unsticky.
			mri_sticky_control_set_other_nodes_unsticky($form_state['node']->nid);
		}		
	}
	else {
		drupal_set_message('KEINE Sticky Nodes im System vorhanden. Deshalb wird die zuletzt bearbeitete Node auf Sticky und veröffentlicht gesetzt.', 'error');
		//$form_state['redirect'] = 'choose/your/path';
		//node_make_sticky_action($form_state['node']);
		$node = node_load($form_state['node']->nid);
		$node->sticky = '1';  
		$node->status = '1';  
    // Save the updated node
    node_save($node);
	}
}
/**
* Implements the config form of the Module.
* @param undefined $form
* @param undefined $form_state
* 
* @return
*/
function mri_sticky_control_form_conf($form, & $form_state) {
	if (user_access('mri sticky view control config permissions')) {
		$ct_list = node_type_get_names();
	  $ct_list = array('none'=> 'Do nothing') + $ct_list;
	  $config_data = mri_sticky_control_load_config_data();
	  $form['content_types'] = array(
	    '#type'         => 'select',
	    '#options'      =>  $ct_list,
	    '#validated'    => TRUE,
	    '#default_value'=> $config_data['default_content_type'],
	    '#title'        => 'Content Type Sticky',
	    '#description'  => 'Choose the Content Type with min. requierement one sticky Node.',
	  );
	  $form['emergency_settings'] = array(
	    '#type'         => 'radios',
	    '#options'               =>  array(
	      'none'          => 'Do nothing',
	      'node_id'       => 'Node with a default InfoText',
	      'latest_content'=> 'Take the latest content',
	      'oldest_content'=> 'Take the oldest content'),
	    '#validated'    => TRUE,
	    '#default_value'=> $config_data['default_emg_type'],
	    '#title'        => 'Emergency Settings',
	  );
	  $form['scinfotype'] = array(
	    '#type'         => 'checkboxes',
	    '#options'               =>  array(
	      'none'               => 'Do nothing',      
	      'show_message_screen'=> 'Show a message on the screen',
	      'send_email_to_user' => 'Send a email to one, or more users',
	      'send_email_to_role' => 'Send an email to all users of a role'),
	    '#validated'    => TRUE,
	    '#default_value'=> $config_data['default_info_type'],
	    '#title'        => 'Type of Info',
	  );
	  $form['scnid'] = array(
	    '#type'         => 'textfield',
	    '#validated'    => FALSE,
	    '#default_value'=> $config_data['default_node_id'],
	    '#description'  => 'Enter the Node ID of the Fallback sticky Node.',
	    '#title'        => 'Default Sticky Node ID',
	  );

	  $form['save'] = array(
	    '#type'    => 'submit',
	    '#value'   =>  'Save',
	    '#submit'       =>  array('mri_sticky_control_config_form_submit'),
	    '#validate' =>  array('mri_sticky_control_config_form_validate'),
	  );
	  return $form;
	}
	else {
		drupal_set_message(t('View Permission missing. The config form could not be viewed.'), 'error');
	}
  
}



/**
* Submit Function handles actions if the config form was submitted
* @param undefined $form
* @param undefined $form_state
*
* @return
*/

function mri_sticky_control_config_form_submit($form, $form_state) {
	if (user_access('mri sticky edit control config permissions')) {
		module_load_include('inc', 'mri_sticky_control', 'mri_sticky_control.functions');
		if ($form_state['values']['content_types'] != 'none') {
	    //variable_set('example_ip', $form_state['values']['example_ip']);
	  }
	  else {
	    //variable_del('example_ip'); //cache Variable
	  }
	  if ($form_state['values']['emergency_settings'] == 'node_id') {
	  }
	  mri_sticky_control_write_conf_data($form_state);
	}
	else {
		drupal_set_message(t('Edit Permission missing. The config form could not be viewed.'), 'error');
		watchdog('mri_sticky_control', 'MRI Sticky Control config form - Edit Permission missing.');
	}  
}


/**
* Load Config Data from DB.
* At first load, default Datas will be used.
*
* @return
*/
function mri_sticky_control_load_config_data() {
	module_load_include('inc', 'mri_sticky_control', 'mri_sticky_control.functions');
  $query = mri_sticky_control_get_config_query();
  $result= NULL;
  $config_settings = array();

  if ($query->rowCount() != NULL) {
    $result = $query->fetchObject();
    $config_settings['default_emg_type'] = $result->scemtype;
    $config_settings['default_info_type'] = $result->scinfotype;
    $config_settings['default_node_id'] = $result->scnid;
    $config_settings['default_content_type'] = $result->scct;

    $infoTypeStrg = explode(",", $config_settings['default_info_type']);
    $config_settings['default_info_type'] = $infoTypeStrg;
  }
  else {
    $config_settings = array(
      'default_emg_type'    => 'none',//default value of the predefined encrypt method
      'default_info_type' => array(
        'none',
      ),
      'default_node_id'     => 0,
      'default_content_type'=> 'none',
    );
    drupal_set_message('No Config Data available at the moment! Default Values are now activated. Please config the module in a first step, directly after Activating!', 'status');
  }
  return $config_settings;
}

